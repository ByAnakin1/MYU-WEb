---
interface Product {
  id_producto: number;
  nombre_producto: string;
  precio: number;
  img1: string;
  descuento?: number;
}

const { products = [] }: { products?: Product[] } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>For Sale</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>

  <body>
    <h2 class="text-center text-lg font-bold bg-pink-300 text-white py-3 mb-4">
      FOR SALE -%
    </h2>

    <section class="relative container mx-auto overflow-hidden">
      <!-- Contenedor del carrusel -->
      <div
        id="carousel"
        class="flex gap-4 transition-transform duration-300 ease-in-out"
        style="transform: translateX(0);"
      >
        {products.length > 0 ? (
          products.map((product) => (
            <div class="flex-shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/5 bg-white rounded-lg shadow-md overflow-hidden max-w-[220px]">
              <img
                src={product.img1}
                alt={`Imagen de ${product.nombre_producto}`}
                class="w-full h-48 object-cover"
              />
              <div class="p-2 text-center">
                <h2 class="text-xs font-bold truncate">
                  {product.nombre_producto}
                </h2>
                <div class="text-red-600 font-bold text-sm">
                  {product.descuento && product.descuento > 0 ? (
                    <>
                      <span class="line-through text-gray-500 text-xs">
                        S/ {Number(product.precio).toFixed(2)}
                      </span>
                      <br />
                      <span>
                        S/{" "}
                        {(
                          Number(product.precio) *
                          (1 - product.descuento / 100)
                        ).toFixed(2)}
                      </span>
                    </>
                  ) : (
                    <span>S/ {Number(product.precio).toFixed(2)}</span>
                  )}
                </div>
                <a
                  href={`/detalle/${product.id_producto}`}
                  class="mt-1 inline-block bg-pink-500 text-white px-2 py-1 text-xs rounded-lg hover:bg-pink-600"
                >
                  Comprar
                </a>
              </div>
            </div>
          ))
        ) : (
          <p class="text-center w-full">No hay productos disponibles.</p>
        )}
      </div>

      <!-- Botones de navegación -->
      <button
        id="prev"
        class="absolute top-1/2 left-2 -translate-y-1/2 bg-gray-200 rounded-full p-2 shadow-md hover:bg-gray-300"
      >
        ◀
      </button>
      <button
        id="next"
        class="absolute top-1/2 right-2 -translate-y-1/2 bg-gray-200 rounded-full p-2 shadow-md hover:bg-gray-300"
      >
        ▶
      </button>
    </section>

    <script>
      const carousel = document.getElementById("carousel");
      const prevButton = document.getElementById("prev");
      const nextButton = document.getElementById("next");

      let currentTranslate = 0;

      // Detectar el tamaño de las tarjetas basado en el ancho del viewport
      function getCardWidth() {
        const screenWidth = window.innerWidth;
        if (screenWidth >= 1024) return carousel.offsetWidth / 5; // 5 tarjetas en pantallas grandes
        return carousel.offsetWidth / 2; // 2 tarjetas en celulares
      }

      let cardWidth = getCardWidth(); // Calcular ancho inicial

      // Calcular el máximo desplazamiento
      function getMaxTranslate() {
        return -(carousel.children.length * cardWidth - carousel.offsetWidth);
      }

      // Actualizar dimensiones cuando se cambia el tamaño de la ventana
      window.addEventListener("resize", () => {
        cardWidth = getCardWidth();
        currentTranslate = Math.min(0, Math.max(currentTranslate, getMaxTranslate()));
        carousel.style.transform = `translateX(${currentTranslate}px)`;
      });

      prevButton.addEventListener("click", () => {
        currentTranslate += cardWidth;
        if (currentTranslate > 0) currentTranslate = 0;
        carousel.style.transform = `translateX(${currentTranslate}px)`;
      });

      nextButton.addEventListener("click", () => {
        currentTranslate -= cardWidth;
        if (currentTranslate < getMaxTranslate()) currentTranslate = getMaxTranslate();
        carousel.style.transform = `translateX(${currentTranslate}px)`;
      });
    </script>
  </body>
</html>
