---
interface Product {
  id_producto: number;
  nombre_producto: string;
  precio: number;
  img1: string;
  descuento?: number;
}

const { products = [] }: { products?: Product[] } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>For Sale</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>

  <body>
    <h2 class="text-center text-lg font-bold bg-pink-300 text-white py-3 mb-4">
      FOR SALE -%
    </h2>

    <section class="relative container mx-auto overflow-hidden">
      <!-- Contenedor del carrusel -->
      <div
        id="carousel"
        class="flex gap-4 transition-transform duration-300 ease-in-out"
        style="transform: translateX(0); cursor: pointer;"
      >
        {products.length > 0 ? (
          products.map((product) => (
            <div class="flex-shrink-0 w-full sm:w-1/2 md:w-1/3 lg:w-1/5 bg-white rounded-lg shadow-md overflow-hidden max-w-[220px]">
              <img
                src={product.img1}
                alt={`Imagen de ${product.nombre_producto}`}
                class="w-full h-48 object-cover"
              />
              <div class="p-2 text-center">
                <h2 class="text-xs font-bold truncate">
                  {product.nombre_producto}
                </h2>
                <div class="text-red-600 font-bold text-sm">
                  {product.descuento && product.descuento > 0 ? (
                    <>
                      <span class="line-through text-gray-500 text-xs">
                        S/ {Number(product.precio).toFixed(2)}
                      </span>
                      <br />
                      <span>
                        S/{" "}
                        {(
                          Number(product.precio) *
                          (1 - product.descuento / 100)
                        ).toFixed(2)}
                      </span>
                    </>
                  ) : (
                    <span>S/ {Number(product.precio).toFixed(2)}</span>
                  )}
                </div>
                <a
                  href={`/detalle/${product.id_producto}`}
                  class="mt-1 inline-block bg-pink-500 text-white px-2 py-1 text-xs rounded-lg hover:bg-pink-600"
                >
                  Comprar
                </a>
              </div>
            </div>
          ))
        ) : (
          <p class="text-center w-full">No hay productos disponibles.</p>
        )}
      </div>
    </section>

    <script>
      const carousel = document.getElementById("carousel");

      let isDragging = false;
      let startX = 0;
      let currentTranslate = 0;
      let previousTranslate = 0;
      let velocity = 0;
      let lastMouseMoveTime = 0;

      // Detectar si es un dispositivo m√≥vil o de escritorio
      const isMobile = window.innerWidth < 1024;

      // Calcular el ancho de las tarjetas
      function getCardWidth() {
        const screenWidth = window.innerWidth;
        return screenWidth >= 1024 ? carousel.offsetWidth / 5 : carousel.offsetWidth / 2;
      }

      let cardWidth = getCardWidth();

      function getMaxTranslate() {
        return -(carousel.children.length * cardWidth - carousel.offsetWidth);
      }

      function startDrag(event) {
        isDragging = true;
        startX = event.type.includes("mouse")
          ? event.pageX
          : event.touches[0].clientX;
        previousTranslate = currentTranslate;
        velocity = 0;
        lastMouseMoveTime = Date.now();
        cancelAnimationFrame(animationID);
        animationID = requestAnimationFrame(animation);
      }

      function drag(event) {
        if (!isDragging) return;
        const currentX = event.type.includes("mouse")
          ? event.pageX
          : event.touches[0].clientX;
        const deltaX = currentX - startX;
        currentTranslate = Math.min(
          0,
          Math.max(previousTranslate + deltaX, getMaxTranslate())
        );

        const now = Date.now();
        const timeDelta = now - lastMouseMoveTime;
        velocity = deltaX / timeDelta;
        lastMouseMoveTime = now;
      }

      function endDrag() {
        isDragging = false;
        applyInertia();
      }

      function applyInertia() {
        const friction = 0.95;
        function inertia() {
          if (Math.abs(velocity) > 0.1) {
            currentTranslate = Math.min(
              0,
              Math.max(currentTranslate + velocity, getMaxTranslate())
            );
            carousel.style.transform = `translateX(${currentTranslate}px)`;
            velocity *= friction;
            requestAnimationFrame(inertia);
          }
        }
        requestAnimationFrame(inertia);
      }

      function animation() {
        if (isDragging) {
          carousel.style.transform = `translateX(${currentTranslate}px)`;
          requestAnimationFrame(animation);
        }
      }

      // Mover carrusel al hacer clic en izquierda o derecha
      function handleClick(event) {
        const rect = carousel.getBoundingClientRect();
        const clickX = event.clientX;

        if (clickX < rect.width / 2) {
          moveCarousel("prev");
        } else {
          moveCarousel("next");
        }
      }

      function moveCarousel(direction) {
        const maxTranslate = getMaxTranslate();
        const targetTranslate =
          direction === "next"
            ? currentTranslate - cardWidth
            : currentTranslate + cardWidth;

        currentTranslate = Math.min(
          0,
          Math.max(targetTranslate, maxTranslate)
        );
        carousel.style.transform = `translateX(${currentTranslate}px)`;
      }

      if (isMobile) {
        carousel.addEventListener("touchstart", startDrag);
        carousel.addEventListener("touchmove", drag);
        carousel.addEventListener("touchend", endDrag);
      } else {
        carousel.addEventListener("mousedown", handleClick);
      }

      window.addEventListener("resize", () => {
        cardWidth = getCardWidth();
        currentTranslate = Math.min(
          0,
          Math.max(currentTranslate, getMaxTranslate())
        );
        carousel.style.transform = `translateX(${currentTranslate}px)`;
      });
    </script>
  </body>
</html>
