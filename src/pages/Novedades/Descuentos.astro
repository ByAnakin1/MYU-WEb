---
import Header from "../../components/header.astro";
import Footer from "../../components/footer.astro";

interface Banner {
  id_banner: number;
  tipo: string;
  img1: string;
  img2: string;
  img3: string;
  img1cell: string;
  img2cell: string;
  img3cell: string;
}

// Fetch de banners desde la API
const bannersResponse = await fetch('http://localhost:3000/api/banners');

if (!bannersResponse.ok) {
  console.error('Error al obtener banners:', bannersResponse.statusText);
  throw new Error(`Error al obtener banners: ${await bannersResponse.text()}`);
}

const banners: Banner[] = await bannersResponse.json();

// Define la interfaz para productos
interface Product {
  id_producto: number;
  nombre_producto: string;
  precio: number;
  img1: string;
  id_categoria: number; // Agrega esta propiedad para filtrar
  descuento?: number;
  estado_1?: string;
}

// Llamada al backend para obtener los productos
const response = await fetch('http://localhost:3000/api/productos');

if (!response.ok) {
  console.error('Error al obtener productos:', response.statusText);
  const errorText = await response.text();
  throw new Error(`Error al obtener productos: ${errorText}`);
}

let products: Product[] = [];
try {
  products = await response.json(); // Parsear la respuesta si es válida
} catch (error) {
  console.error('Error al parsear productos:', error);
  throw new Error('La respuesta del servidor no es válida.');
}

// Filtrar los productos con id_categoria = 3
const filteredProducts = products.filter(product => product.estado_1 === 'descuento');
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tienda - Zona Outlet</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-color: #fffcf6;
        font-family: "Arial", sans-serif;
        overflow-x: hidden;
      }

      .no-scroll {
        height: 100%;
        overflow: hidden;
      }

      .container {
        width: 90%;
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto;
        padding: 2rem 0;
      }

      .cards-container {
        display: grid;
        gap: 2rem;
        justify-content: center;
      }

      @media (max-width: 1023px) {
        .cards-container {
          grid-template-columns: repeat(2, 1fr);
        }
      }

      @media (min-width: 1024px) {
        .cards-container {
          grid-template-columns: repeat(4, 1fr);
        }
      }

      .card {
        width: 100%;
      }

      .page-title {
        text-align: center;
        font-size: 2.5rem;
        font-weight: bold;
        color: #4a5568;
        margin-bottom: 2rem;
        margin-top: -4rem; /* Ajusta a un valor más pequeño aquí */
        text-transform: uppercase;
        letter-spacing: 2px;
      }

      .filter-button {
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        background-color: #f5bacf;
        color: white;
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      .filter-button:hover {
        background-color: #f5bacf;
      }

      .filter-button svg {
        margin-right: 0.5rem;
      }

      .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.5);
        transform: translateX(-100%);
        transition: transform 0.3s ease;
        z-index: 40;
      }

      .overlay.show {
        transform: translateX(0);
      }

      .overlay-content {
        width: 80%;
        max-width: 360px;
        background: white;
        height: 100%;
        padding: 2rem;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
      }

      .banner {
        height: 400px;
        background-size: cover;
        background-position: center;
        margin-top: 2rem;
      }

      @media (max-width: 640px) {
        .banner {
          height: 200px;
        }
      }

      .section-title {
        font-size: 1.75rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 1.5rem;
        text-align: center;
      }

      .section-item {
        background-color: #f1f1f1;
        height: 150px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        font-weight: bold;
        text-transform: uppercase;
        color: #555;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      .section-item:hover {
        background-color: #ddd;
      }

      .banner img {
        width: 100%;
        height: auto; /* Mantén la proporción de la imagen */
        display: block;
      }

      body {
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            background-color: #FFF5F7;
            font-family: 'Arial', sans-serif;
        }

        .container {
            width: 90%;
            max-width: 1200px;
            margin-left: auto;
            margin-right: auto;
            padding: 2rem 0;
        }

        .cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .card {
            background: white;
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
        }

        .card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .card-content {
            padding: 1rem;
            text-align: center;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
            text-transform: capitalize;
        }

        .card-price {
            color: #f56565;
            font-weight: bold;
            margin-bottom: 1rem;
        }

        .card-button {
            display: inline-block;
            background: #f6bbd0;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            text-decoration: none;
            font-weight: bold;
            transition: background 0.3s;
        }

        .card-button:hover {
            background: #f56565;
        }

        .page-title {
            text-align: center;
            font-size: 2.5rem;
            font-weight: bold;
            color: #4A5568;
            margin-bottom: 2rem;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .filter-button {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            background-color: #f5bacf;
            color: white;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .filter-button:hover {
            background-color: #f5bacf;
        }

        .filter-button svg {
            margin-right: 0.5rem;
        }

        @media (max-width: 767px) {
            .filter-button {
                padding: 1rem 2rem;
                font-size: 1.25rem;
            }
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
            z-index: 40;
        }

        .overlay.show {
            transform: translateX(0);
        }

        .filters {
            position: sticky;
            top: 1rem;
            background: white;
            padding: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .overlay-content {
            width: 80%;
            max-width: 360px;
            background: white;
            height: 100%;
            padding: 2rem;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }

        .no-scroll {
            overflow: hidden;
        }

        @media (max-width: 1023px) {
            .cards-container {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (min-width: 1024px) {
            .cards-container {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        .card {
            width: 100%;
        }

        input[type="range"] {
            -webkit-appearance: none;
            width: 100%;
            background: transparent;
        }
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            height: 15px;
            width: 15px;
            border-radius: 50%;
            background: #f56565;
            cursor: pointer;
        }
        input[type="range"]::-webkit-slider-runnable-track {
            height: 5px;
            background: #f6bbd0;
            border-radius: 5px;
        }



    </style>
  </head>
  <body>
    <Header />
    <br>

    <div class="container">
      {banners.length > 0 ? (
        <div class="banner">
          <img 
            src={banners[0].img1} 
            srcset={`${banners[0].img1cell} 768w, ${banners[0].img1} 1024w`} 
            sizes="(max-width: 768px) 100vw, 1024px" 
            alt={`Banner ${banners[0].id_banner}`} 
          />
        </div>
      ) : (
        <p>No hay banners disponibles</p>
      )}
    </div>
    
    
    <!-- Secciones de Hombre, Mujer, Niños -->
<div class="container my-6">
  <!-- Cambia my-12 por my-6 aquí -->
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-6">
    <a href="/Novedades/Accesorios" class="section-item bg-gray-200 h-40 flex items-center justify-center">
      Accesorios
    </a>
    <a href="/Novedades/Novedades" class="section-item bg-gray-200 h-40 flex items-center justify-center">
      Novedades
    </a>
    <a href="/Novedades/Descuentos" class="section-item bg-gray-200 h-40 flex items-center justify-center">
      Descuentos
    </a>
  </div>
</div>


<div class="container flex flex-col md:flex-row">
    <!-- Panel de filtros -->
    <aside class="filters w-full md:w-1/5 p-4 bg-white shadow-md mt-10 filter-container mr-6">
        <h2 class="font-bold text-xl mb-4">Filtros</h2>
        <div class="mb-6">
            <div class="mt-2">
                <label for="price-range">Rango de precios</label>
                <input type="range" id="price-range" min="1" max="500" step="1" value="500">
                <span id="min-price">S/ 1.00</span> - <span id="max-price">S/ 500.00</span>
            </div>
        </div>

        <div class="mb-6">
            <h3 class="font-semibold">Descuento</h3>
            <div class="mt-2">
                <div class="flex justify-between items-center">
                    <span id="discount-value">0%</span>
                </div>
                <input type="range" id="discount-range" class="w-full" min="0" max="100" step="1" value="0" />
            </div>
        </div>

        <div class="mb-6">
            <h3 class="font-semibold">Color</h3>
            <ul class="space-y-2 mt-2">
                <li><input type="checkbox" id="colorAmarillo" /> <label for="colorAmarillo">Amarillo</label></li>
                <li><input type="checkbox" id="colorAzul" /> <label for="colorAzul">Azul</label></li>
                <li><input type="checkbox" id="colorBlanco" /> <label for="colorBlanco">Blanco</label></li>
            </ul>
        </div>
    </aside>

    <!-- Productos de faldas -->
    <main class="w-full md:w-4/5 p-4">
        <h1 class="page-title">DESCUENTOS</h1>
        <div class="cards-container">
            {filteredProducts.length > 0 ? (
                filteredProducts.map((product: Product) => (
                <div class="card">
                    <img src={product.img1} alt={`Imagen de ${product.nombre_producto}`} />
                    <div class="card-content">
                    <h2 class="card-title">{product.nombre_producto}</h2>
                    
                    <div class="price-section">
                        {product.descuento && product.descuento > 0 ? (
                        <>
                            <div class="flex justify-center items-center gap-2 mt-2">
                            <span class="original-price text-sm line-through text-gray-500">
                                S/ {Number(product.precio).toFixed(2)}
                            </span>
                            <span class="discount-badge text-sm text-white bg-red-600 px-2 py-1 rounded-md">
                                -{Math.round(product.descuento)}%
                            </span>
                            </div>
                            <div class="flex justify-center mt-2">
                            <span class="price-tag text-xl font-bold text-red-600">
                                S/ {(Number(product.precio) * (1 - product.descuento / 100)).toFixed(2)}
                            </span>
                            </div>
                        </>
                        ) : (
                        <div class="flex justify-center mt-2">
                            <span class="price-tag text-xl font-bold">
                            S/ {Number(product.precio).toFixed(2)}
                            </span>
                        </div>
                        )}
                    </div>
        
                    <a href={`/detalle/${product.id_producto}`} class="card-button">Comprar</a>
                    </div>
                </div>
                ))
            ) : (
                <p class="text-center">No hay productos disponibles.</p>
            )}
        </div>
    </main>
</div>

<!-- Botón de filtro visible solo en dispositivos móviles -->
<button class="filter-button flex items-center md:hidden" id="filterToggleMobile">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h18M3 12h18M3 19h18"></path>
    </svg>
    Filtros
</button>

<!-- Panel de filtros visible solo en dispositivos móviles -->
<div class="overlay" id="filterSidebarMobile">
    <div class="overlay-content">
        <button class="text-gray-600 hover:text-gray-800 focus:outline-none" id="closeFilterMobile">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
        <h2 class="font-bold text-xl mb-4">Filtros</h2>
        <div class="mb-6">
            <h3 class="font-semibold">Precio</h3>
            <div class="mt-2">
                <div class="flex justify-between items-center">
                    <span>S/ <span id="max-price-mobile">4000.00</span></span>
                </div>
                <input type="range" id="price-range-mobile" class="w-full" min="1" max="4000" step="1" value="0,4000" />
            </div>
        </div>

        <div class="mb-6">
            <h3 class="font-semibold">Descuento</h3>
            <div class="mt-2">
                <div class="flex justify-between items-center">
                    <span><span id="discount-range-mobile">0</span>%</span>
                </div>
                <input type="range" id="discount-range-mobile" class="w-full" min="0" max="100" step="1" value="0" />
            </div>
        </div>

        <div class="mb-6">
            <h3 class="font-semibold">Color</h3>
            <ul class="space-y-2 mt-2">
                <li><input type="checkbox" id="colorAmarillo-mobile" /> <label for="colorAmarillo-mobile">Amarillo</label></li>
                <li><input type="checkbox" id="colorAzul-mobile" /> <label for="colorAzul-mobile">Azul</label></li>
                <li><input type="checkbox" id="colorBlanco-mobile" /> <label for="colorBlanco-mobile">Blanco</label></li>
            </ul>
        </div>
    </div>
</div>

<Footer />

<script type="module">
    document.addEventListener('DOMContentLoaded', () => {
        // Obtener referencias a los elementos del DOM
        const priceRange = document.getElementById('price-range');
        const minPriceLabel = document.getElementById('min-price');
        const maxPriceLabel = document.getElementById('max-price');
        const discountRange = document.getElementById('discount-range');
        const discountLabel = document.getElementById('discount-value');
        const cardsContainer = document.querySelector('.cards-container');

        // Función para actualizar los valores del rango de precios
        const updatePriceLabels = () => {
            const priceValue = priceRange.value;
            minPriceLabel.textContent = "S/ 1.00"; // Mínimo fijo
            maxPriceLabel.textContent = `S/ ${parseFloat(priceValue).toFixed(2)}`; // Máximo dinámico
        };

        // Función para actualizar el valor del descuento
        const updateDiscountLabel = () => {
            const discountValue = discountRange.value;
            discountLabel.textContent = `${discountValue}%`;
        };

        // Función para filtrar productos dinámicamente
        const filterProducts = () => {
            const maxPrice = parseFloat(priceRange.value);
            const maxDiscount = parseInt(discountRange.value);

            // Filtrar los productos
            const filtered = products.filter(product => {
                const finalPrice = product.descuento
                    ? product.precio * (1 - product.descuento / 100)
                    : product.precio;

                // Comprobar si cumple con el rango de precio y descuento
                return finalPrice <= maxPrice && product.descuento <= maxDiscount;
            });

            // Renderizar los productos filtrados
            renderProducts(filtered);
        };

        // Función para renderizar los productos
        const renderProducts = (products) => {
            cardsContainer.innerHTML = ''; // Limpiar los productos actuales

            if (products.length === 0) {
                cardsContainer.innerHTML = '<p class="text-center">No hay productos disponibles.</p>';
                return;
            }

            products.forEach(product => {
                const card = document.createElement('div');
                card.className = 'card';

                card.innerHTML = `
                    <img src="${product.img1}" alt="Imagen de ${product.nombre_producto}" />
                    <div class="card-content">
                        <h2 class="card-title">${product.nombre_producto}</h2>
                        <div class="price-section">
                            ${product.descuento && product.descuento > 0
                                ? `
                                <div class="flex justify-center items-center gap-2 mt-2">
                                    <span class="original-price text-sm line-through text-gray-500">
                                        S/ ${product.precio.toFixed(2)}
                                    </span>
                                    <span class="discount-badge">
                                        -${Math.round(product.descuento)}%
                                    </span>
                                </div>
                                <div class="flex justify-center mt-2">
                                    <span class="price-tag text-xl font-bold text-red-600">
                                        S/ ${(product.precio * (1 - product.descuento / 100)).toFixed(2)}
                                    </span>
                                </div>`
                                : `<div class="flex justify-center mt-2">
                                    <span class="price-tag text-xl font-bold">
                                        S/ ${product.precio.toFixed(2)}
                                    </span>
                                </div>`}
                        </div>
                        <a href="/detalle/${product.id_producto}" class="card-button">Comprar</a>
                    </div>
                `;

                cardsContainer.appendChild(card);
            });
        };

        // Eventos para actualizar y filtrar
        priceRange.addEventListener('input', () => {
            updatePriceLabels();
            filterProducts();
        });

        discountRange.addEventListener('input', () => {
            updateDiscountLabel();
            filterProducts();
        });

        // Inicializar los valores
        updatePriceLabels();
        updateDiscountLabel();
        renderProducts(products); // Mostrar todos los productos al inicio
    });
</script>
</body>
</html>
