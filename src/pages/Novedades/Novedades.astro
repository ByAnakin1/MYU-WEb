---
import Header from "../../components/header.astro";
import Footer from "../../components/footer.astro";

interface Banner {
  id_banner: number;
  tipo: string;
  img1: string;
  img2: string;
  img3: string;
  img1cell: string;
  img2cell: string;
  img3cell: string;
}

// Fetch de banners desde la API
const bannersResponse = await fetch('http://localhost:3000/api/banners');

if (!bannersResponse.ok) {
  console.error('Error al obtener banners:', bannersResponse.statusText);
  throw new Error(`Error al obtener banners: ${await bannersResponse.text()}`);
}

const banners: Banner[] = await bannersResponse.json();

// Define la interfaz para productos
interface Product {
  id_producto: number;
  nombre_producto: string;
  precio: number;
  img1: string;
  id_categoria: number; // Agrega esta propiedad para filtrar
  descuento?: number;
  id_cat_accesorio?: number | null;
  estado_1?: string;
}

// Llamada al backend para obtener los productos
const response = await fetch('http://localhost:3000/api/productos');

if (!response.ok) {
  console.error('Error al obtener productos:', response.statusText);
  const errorText = await response.text();
  throw new Error(`Error al obtener productos: ${errorText}`);
}

let products: Product[] = [];
try {
  products = await response.json(); // Parsear la respuesta si es v치lida
} catch (error) {
  console.error('Error al parsear productos:', error);
  throw new Error('La respuesta del servidor no es v치lida.');
}

let filteredProducts: Product[] = [];

// Cargar productos del servidor al renderizado inicial
try {
  const response = await fetch('http://localhost:3000/api/productos');
  if (response.ok) {
    products = await response.json();
    filteredProducts = products.filter(product => product.id_cat_accesorio !== null);
  } else {
    console.error('Error en la respuesta del servidor:', response.statusText);
  }
} catch (err) {
  console.error('Error al obtener productos:', err);
}
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/src/styles/global.css" />
    <title>Tienda - Zona Outlet</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-color: #fff5f7;
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
      }

      .container {
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 0;
      }

      .cards-container {
            box-sizing: border-box;
            width: 100%;
            max-width: none;
        }

      .card {
        background: #fff;
        border-radius: 0.75rem;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
      }

      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
      }

      .card img {
        width: 100%;
        height: 200px;
        object-fit: cover;
      }

      .card-content {
        padding: 1rem;
        text-align: center;
      }

      .card-title {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: #4a5568;
      }

      .card-price {
        color: #f56565;
        font-weight: bold;
        margin-bottom: 1rem;
      }

      .card-button {
        display: inline-block;
        background: #f6bbd0;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        text-decoration: none;
        font-weight: bold;
        transition: background 0.3s;
      }

      .card-button:hover {
        background: #f56565;
      }

      .page-title {
        text-align: center;
        font-size: 2.5rem;
        font-weight: bold;
        color: #4a5568;
        margin-bottom: 2rem;
        text-transform: uppercase;
        letter-spacing: 2px;
      }

      .filter-button {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            background-color: #f5bacf;
            color: white;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .filter-button:hover {
            background-color: #f56565;
        }

        .filter-button svg {
            margin-right: 0.5rem;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000; /* Ensure it's above other content */
            display: none; /* Initially hidden */
        }

        .overlay.show {
            display: block; /* Display when triggered */
        }

        .overlay-content {
            width: 80%;
            max-width: 360px;
            background: white;
            height: 100%;
            padding: 2rem;
            box-shadow: 4px 0 15px rgba(0, 0, 0, 0.1);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
            position: relative;
        }

        .overlay.show .overlay-content {
            transform: translateX(0);
        }

        .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            background: none;
            border: none;
            cursor: pointer;
        }

        .close-button:hover {
            color: #f56565;
        }

        .sort-select {
            padding: 0.5rem;
            border: 1px solid #f6bbd0;
            border-radius: 0.5rem;
            background-color: white;
        }

        /* Mobile (up to 767px) */
        @media (max-width: 767px) {
            .container {
                flex-direction: column;
            }

            .filter-button {
                padding: 0.5rem 1rem;
                font-size: 1.25rem;
            }

            .filters {
                display: none;
            }

            .cards-container {
                grid-template-columns: repeat(2, 1fr);

            }
        }

        /* Tablet (768px to 1023px) */
        @media (min-width: 768px) and (max-width: 1023px) {
            .container {
                flex-direction: column;
            }

            .filter-button {
                display: block;
                margin: 1rem auto;
                width: fit-content;
            }

            .filters {
                display: none;
            }

            .cards-container {
                grid-template-columns: repeat(3, 1fr);
            }

            .overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 1000;
            }

            .overlay.show {
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .overlay-content {
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                max-width: 90%;
                max-height: 90%;
                overflow-y: auto;
                position: relative;
            }

            .overlay.show .overlay-content {
                transform: translateX(0);
            }
        }
        /* Desktop (1024px and up) */
        @media (min-width: 1024px) {
            .cards-container {
                grid-template-columns: repeat(4, 1fr);
            }

            .card {
                max-width: 280px;
            }

            .overlay, .overlay-content {
                display: none;
            }
        }

      .page-title {
            top: 7rem;
            text-align: center;
            font-size: 2.5rem;
            font-weight: bold;
            color: #4A5568;
            margin-bottom: 1.5rem; /* Reducido margen inferior */
            text-transform: uppercase;
            letter-spacing: 1px; /* Ajustar el espaciado entre letras */
            line-height: 1.2; /* Mejora la alineaci칩n vertical */
            margin-bottom: -3rem;
        }


    </style>
  </head>
  <body>
    <Header />
    <br>

    <div class="container">
        {banners.length > 0 && banners.some((banner) => banner.id_banner === 2) ? (
          <div class="banner">
            <a href={banners.find((banner) => banner.id_banner === 2).img2cell} target="_blank" rel="noopener noreferrer">
              <img 
                src={banners.find((banner) => banner.id_banner === 2).img2} 
                srcset={`${banners.find((banner) => banner.id_banner === 2).img2cell} 768w, ${banners.find((banner) => banner.id_banner === 2).img2} 1024w`} 
                sizes="(max-width: 768px) 100vw, 1024px" 
                alt={`Banner ${banners.find((banner) => banner.id_banner === 2).id_banner}`} 
                class="w-full object-cover"
              />
            </a>
          </div>
        ) : (
          <p>No hay banners disponibles</p>
        )}
      </div>
    
    
    

    <!-- Secciones de Hombre, Mujer, Ni침os -->
    <div class="container my-6">
      <div class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-2 gap-2 mb-6">
        <a href="/Novedades/Accesorios" class="section-item bg-gray-200 h-32 flex items-center justify-center text-sm relative">
          <img src="/public/img/banners/ba-accesorios.png" class="absolute inset-0 w-full h-full object-cover z-0" />
        </a>
        <a href="/Novedades/Novedades" class="section-item bg-gray-200 h-32 flex items-center justify-center text-sm relative">
          <img src="/public/img/banners/ba-novedades.png" class="absolute inset-0 w-full h-full object-cover z-0" />
        </a>
        <div class="col-span-2 flex justify-center">
          <a href="/Novedades/Descuentos" class="section-item bg-gray-200 h-32 w-1/2 flex items-center justify-center text-sm relative">
            <img src="/public/img/banners/ba-descuentos.png" class="absolute inset-0 w-full h-full object-cover z-0" />
          </a>
        </div>
      </div>
    </div>
    

<h1 class="page-title">NOVEDADES</h1>
<br>

<div class="container flex flex-col md:flex-row">
    <!-- Panel de filtros -->
    <aside id="filtersPanel" class="filters w-full md:w-1/5 p-4 bg-white shadow-md mt-9 filter-container mr-6 hidden md:block">
      <button class="close-button md:hidden" onclick="closeFilters()">칑</button>
      <h2 class="font-bold text-xl mb-4">Filtros</h2>
      <div class="mb-6">
          <h3 class="font-semibold">Rango de Precios</h3>
          <ul class="space-y-2 mt-2">
              <li><input type="checkbox" id="price-1-20" /> <label for="price-1-20">S/ 1 - S/ 20</label></li>
              <li><input type="checkbox" id="price-21-40" /> <label for="price-21-40">S/ 21 - S/ 40</label></li>
              <li><input type="checkbox" id="price-41-60" /> <label for="price-41-60">S/ 41 - S/ 60</label></li>
              <li><input type="checkbox" id="price-61-100" /> <label for="price-61-100">S/ 61 - S/ 100</label></li>
              <li><input type="checkbox" id="price-101-300" /> <label for="price-101-300">S/ 101 - S/ 300</label></li>
          </ul>
      </div>
      
      <div class="mb-6">
          <h3 class="font-semibold">Descuentos</h3>
          <ul class="space-y-2 mt-2">
              <li><input type="checkbox" id="discount-0-10" /> <label for="discount-0-10">0% - 10%</label></li>
              <li><input type="checkbox" id="discount-11-20" /> <label for="discount-11-20">11% - 20%</label></li>
              <li><input type="checkbox" id="discount-21-30" /> <label for="discount-21-30">21% - 30%</label></li>
              <li><input type="checkbox" id="discount-31-40" /> <label for="discount-31-40">31% - 40%</label></li>
              <li><input type="checkbox" id="discount-41-50" /> <label for="discount-41-50">41% - 50%</label></li>
          </ul>
      </div>
  </aside>

  <!-- Add this overlay div after the main container -->
  <div class="overlay" id="overlayFiltersMobile">
      <div class="overlay-content">
          <button class="close-button md:hidden" id="closeOverlayFiltersMobile">칑</button>
          <div id="mobileFiltersContent">
              <!-- Move the existing filters content here -->
              <h2 class="font-bold text-xl mb-4">Filtros</h2>
              <div class="mb-6">
                  <h3 class="font-semibold">Rango de Precios</h3>
                  <ul class="space-y-2 mt-2">
                      <li><input type="checkbox" id="price-1-20-mobile" /> <label for="price-1-20-mobile">S/ 1 - S/ 20</label></li>
                      <li><input type="checkbox" id="price-21-40-mobile" /> <label for="price-21-40-mobile">S/ 21 - S/ 40</label></li>
                      <li><input type="checkbox" id="price-41-60-mobile" /> <label for="price-41-60-mobile">S/ 41 - S/ 60</label></li>
                      <li><input type="checkbox" id="price-61-100-mobile" /> <label for="price-61-100-mobile">S/ 61 - S/ 100</label></li>
                      <li><input type="checkbox" id="price-101-300-mobile" /> <label for="price-101-300-mobile">S/ 101 - S/ 300</label></li>
                  </ul>
              </div>
              
              <div class="mb-6">
                  <h3 class="font-semibold">Descuentos</h3>
                  <ul class="space-y-2 mt-2">
                      <li><input type="checkbox" id="discount-0-10-mobile" /> <label for="discount-0-10-mobile">0% - 10%</label></li>
                      <li><input type="checkbox" id="discount-11-20-mobile" /> <label for="discount-11-20-mobile">11% - 20%</label></li>
                      <li><input type="checkbox" id="discount-21-30-mobile" /> <label for="discount-21-30-mobile">21% - 30%</label></li>
                      <li><input type="checkbox" id="discount-31-40-mobile" /> <label for="discount-31-40-mobile">31% - 40%</label></li>
                      <li><input type="checkbox" id="discount-41-50-mobile" /> <label for="discount-41-50-mobile">41% - 50%</label></li>
                  </ul>
              </div>
          </div>
      </div>
  </div>

  <!-- Productos de faldas -->
  <main class="w-full md:w-4/5 p-4">
      <div class="sort-filter-container flex justify-between items-center mb-4">
          <button class="filter-button md:hidden" id="toggleFilters" onclick="openFilters()">Filtros</button>
          <select id="sort-select" class="sort-select">
              <option value="default">Ordenar por</option>
              <option value="price-asc">Precio: Menor a Mayor</option>
              <option value="price-desc">Precio: Mayor a Menor</option>
          </select>
      </div>

      <div class="cards-container">
          
  </main>
</div>

<Footer />

<script>
  declare global {
      interface Window {
          closeFilters: () => void;
      }
  }

  document.addEventListener('DOMContentLoaded', () => {
      const body = document.body;
      const overlay = document.querySelector('#overlayFiltersMobile');
      const toggleFiltersButton = document.getElementById('toggleFilters');
      const closeFiltersButton = document.getElementById('closeOverlayFiltersMobile');

      // Check if elements exist
      if (!overlay || !toggleFiltersButton || !closeFiltersButton) {
          console.error('One or more required elements not found');
          return;
      }

      // Open mobile filters (show overlay)
      function openMobileFilters() {
          overlay.classList.add('show'); // Show overlay
          body.style.overflow = 'hidden'; // Disable body scrolling
      }

      // Close mobile filters (hide overlay)
      function closeMobileFilters() {
          overlay.classList.remove('show'); // Hide overlay
          body.style.overflow = 'auto'; // Enable body scrolling
      }

      // Make closeMobileFilters globally available
      window.closeFilters = closeMobileFilters;

      // Open filters when the button is clicked
      toggleFiltersButton.addEventListener('click', openMobileFilters);

      // Close filters when the close button (칑) is clicked
      closeFiltersButton.addEventListener('click', (event) => {
          event.stopPropagation(); // Prevent event from bubbling
          closeMobileFilters();
      });

      // Close overlay if clicking outside the overlay content
      overlay.addEventListener('click', (event) => {
          if (event.target === overlay) {
              closeMobileFilters();
          }
      });
  });
</script>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
      // Fetch products from the server again to ensure we have the full product list
      fetch('http://localhost:3000/api/productos')
          .then(response => response.json())
          .then(allProducts => {
              // Filter only skirt products (id_categoria = 3)
              const products = allProducts.filter(product => product.estado_1 === 'novedad');
              
              const priceCheckboxes = document.querySelectorAll('input[id^="price-"]');
              const discountCheckboxes = document.querySelectorAll('input[id^="discount-"]');
              const cardsContainer = document.querySelector('.cards-container');
              const sortSelect = document.getElementById('sort-select');
              
              // Funci칩n para filtrar productos
              const filterProducts = () => {
                  const selectedPriceRanges = Array.from(priceCheckboxes)
                      .filter(checkbox => checkbox.checked)
                      .map(checkbox => checkbox.id);
      
                  const selectedDiscountRanges = Array.from(discountCheckboxes)
                      .filter(checkbox => checkbox.checked)
                      .map(checkbox => checkbox.id);
      
                      const filtered = products.filter(product => {
                          // Calculate discounted price
                          const discountedPrice = product.precio * (1 - (product.descuento || 0) / 100);

                          // Comprobar rango de precios considerando el precio con descuento
                          const isPriceMatch = selectedPriceRanges.length === 0 || selectedPriceRanges.some(range => {
                              switch (range) {
                                  case 'price-1-20': return discountedPrice >= 1 && discountedPrice <= 20;
                                  case 'price-21-40': return discountedPrice > 21 && discountedPrice <= 40;
                                  case 'price-41-60': return discountedPrice > 41 && discountedPrice <= 60;
                                  case 'price-61-100': return discountedPrice > 61 && discountedPrice <= 100;
                                  case 'price-101-300': return discountedPrice > 101 && discountedPrice <= 300;
                                  default: return false;
                              }
                          });

                          // Comprobar rango de descuentos (mantener igual)
                          const isDiscountMatch = selectedDiscountRanges.length === 0 || selectedDiscountRanges.some(range => {
                              const discount = product.descuento || 0;
                              switch (range) {
                                  case 'discount-0-10': return discount >= 0 && discount <= 10;
                                  case 'discount-11-20': return discount > 11 && discount <= 20;
                                  case 'discount-21-30': return discount > 21 && discount <= 30;
                                  case 'discount-31-40': return discount > 31 && discount <= 40;
                                  case 'discount-41-50': return discount > 41 && discount <= 50;
                                  default: return false;
                              }
                          });

                          // Validar todas las condiciones
                          return isPriceMatch && isDiscountMatch;
                      });
      
                  // Apply sorting
                  const sortedProducts = sortProducts(filtered);
                  renderProducts(sortedProducts);
              };
      


              // Funci칩n para ordenar productos
              const sortProducts = (productsToSort) => {
                  const sortValue = sortSelect.value;
                  
                  switch(sortValue) {
                      case 'price-asc':
                          return productsToSort.sort((a, b) => {
                              // Calcular precio final con descuento
                              const priceA = a.descuento 
                                  ? a.precio * (1 - a.descuento / 100) 
                                  : a.precio;
                              const priceB = b.descuento 
                                  ? b.precio * (1 - b.descuento / 100) 
                                  : b.precio;
                              
                              return priceA - priceB;
                          });
                      case 'price-desc':
                          return productsToSort.sort((a, b) => {
                              // Calcular precio final con descuento
                              const priceA = a.descuento 
                                  ? a.precio * (1 - a.descuento / 100) 
                                  : a.precio;
                              const priceB = b.descuento 
                                  ? b.precio * (1 - b.descuento / 100) 
                                  : b.precio;
                              
                              return priceB - priceA;
                          });
                      default:
                          return productsToSort;
                  }
              };
      
              const renderProducts = (productsToRender) => {
                  cardsContainer.innerHTML = ''; // Limpiar el contenedor

                  if (productsToRender.length === 0) {
                      cardsContainer.innerHTML = '<p class="text-center">No hay productos disponibles.</p>';
                      return;
                  }

                  // Crear un contenedor de rejilla
                  const gridContainer = document.createElement('div');
                  gridContainer.className = 'grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 justify-center items-center';

                  productsToRender.forEach(product => {
                      const card = document.createElement('div');
                      card.className = 'card bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 flex flex-col items-center justify-center mx-auto max-w-[200px] w-full'; 

                      const precio = Number(product.precio);
                      const descuento = Number(product.descuento || 0);

                      card.innerHTML = `
                          <img 
                              src="${product.img1}" 
                              alt="Imagen de ${product.nombre_producto}" 
                              class="w-full h-48 object-cover"
                          />
                          <div class="card-content p-4 flex flex-col justify-between flex-grow">
                              <div class="title-container mb-2">
                                  <h2 class="card-title text-sm text-center font-semibold text-gray-800 overflow-hidden text-ellipsis whitespace-nowrap">
                                      ${product.nombre_producto}
                                  </h2>
                              </div>

                              <div class="price-section mt-0 text-center">
                                  ${descuento > 0 
                                      ? `
                                      <div class="flex justify-center items-center gap-2">
                                          <span class="original-price text-xs line-through text-gray-500">
                                              S/ ${precio.toFixed(2)}
                                          </span>
                                          <span class="discount-badge text-xs text-white bg-pink-300 px-2 py-1 rounded-full">
                                              -${Math.round(descuento)}%
                                          </span>
                                      </div>
                                      <div class="flex justify-center mt-1">
                                          <span class="price-tag text-xl font-bold text-pink-600">
                                              S/ ${(precio * (1 - descuento / 100)).toFixed(2)}
                                          </span>
                                      </div>`
                                      : `
                                      <div class="flex justify-center mt-2">
                                          <span class="price-tag text-xl font-bold text-gray-800">
                                              S/ ${precio.toFixed(2)}
                                          </span>
                                      </div>`
                                  }
                              </div>

                              <a 
                                  href="/detalle/${product.id_producto}" 
                                  class="card-button block text-center bg-pink-300 text-white text-sm font-medium py-2 px-4 rounded-lg mt-4 hover:bg-pink-600 transition-colors duration-300 mt-auto"
                              >
                                  Comprar
                              </a>
                          </div>
                      `;

                      gridContainer.appendChild(card);
                  });

                  cardsContainer.appendChild(gridContainer);
              };





              // Agregar eventos a los checkboxes y selector de ordenamiento
              [...priceCheckboxes, ...discountCheckboxes].forEach(checkbox => {
                  checkbox.addEventListener('change', filterProducts);
              });
      
              // Evento para ordenamiento
              sortSelect.addEventListener('change', filterProducts);
      
              // Renderizar todos los productos inicialmente
              renderProducts(products);
          })
          .catch(error => {
              console.error('Error fetching products:', error);
          });
  });
</script> 
</body>
</html>