---
import Header from "../components/header.astro";
import Footer from "../components/footer.astro";

interface Banner {
  id_banner: number;
  tipo: string;
  img1: string;
  img2: string;
  img3: string;
  img1cell: string;
  img2cell: string;
  img3cell: string;
}

// Fetch de banners desde la API
const bannersResponse = await fetch('http://localhost:3000/api/banners');

if (!bannersResponse.ok) {
  console.error('Error al obtener banners:', bannersResponse.statusText);
  throw new Error(`Error al obtener banners: ${await bannersResponse.text()}`);
}

const banners: Banner[] = await bannersResponse.json();

// Define la interfaz para productos
interface Product {
  id_producto: number;
  nombre_producto: string;
  precio: number;
  img1: string;
  id_categoria: number; // Agrega esta propiedad para filtrar
  descuento?: number;
}

// Llamada al backend para obtener los productos
const response = await fetch('http://localhost:3000/api/productos');

if (!response.ok) {
  console.error('Error al obtener productos:', response.statusText);
  const errorText = await response.text();
  throw new Error(`Error al obtener productos: ${errorText}`);
}

let products: Product[] = [];
try {
  products = await response.json(); // Parsear la respuesta si es válida
} catch (error) {
  console.error('Error al parsear productos:', error);
  throw new Error('La respuesta del servidor no es válida.');
}

let filteredProducts: Product[] = [];

// Cargar productos del servidor al renderizado inicial
try {
  const response = await fetch('http://localhost:3000/api/productos');
  if (response.ok) {
    products = await response.json();
    filteredProducts = products.filter(product => product.descuento !== null);
  } else {
    console.error('Error en la respuesta del servidor:', response.statusText);
  }
} catch (err) {
  console.error('Error al obtener productos:', err);
}
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tienda - Zona Outlet</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background-color: #fff5f7;
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
      }

      .container {
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 0;
      }

      .cards-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
      }

      .card {
        background: #fff;
        border-radius: 0.75rem;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
      }

      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
      }

      .card img {
        width: 100%;
        height: 200px;
        object-fit: cover;
      }

      .card-content {
        padding: 1rem;
        text-align: center;
      }

      .card-title {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: #4a5568;
      }

      .card-price {
        color: #f56565;
        font-weight: bold;
        margin-bottom: 1rem;
      }

      .card-button {
        display: inline-block;
        background: #f6bbd0;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        text-decoration: none;
        font-weight: bold;
        transition: background 0.3s;
      }

      .card-button:hover {
        background: #f56565;
      }

      .page-title {
        text-align: center;
        font-size: 2.5rem;
        font-weight: bold;
        color: #4a5568;
        margin-bottom: 2rem;
        text-transform: uppercase;
        letter-spacing: 2px;
      }

      .filter-button {
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        background-color: #f5bacf;
        color: white;
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      .filter-button:hover {
        background-color: #f472b6;
      }

      .filters {
        position: sticky;
        top: 1rem;
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }

      .filters h2 {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
      }

      input[type="checkbox"] + label {
        cursor: pointer;
        font-size: 0.9rem;
      }

      input[type="range"] {
        width: 100%;
        height: 5px;
        border-radius: 5px;
        background: #f6bbd0;
      }

      input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        background: #f56565;
        cursor: pointer;
      }

      @media (max-width: 767px) {
        .filter-button {
          width: 100%;
          padding: 1rem;
        }

        .cards-container {
          grid-template-columns: repeat(2, 1fr);
        }
      }

      .page-title {
            top: 7rem;
            text-align: center;
            font-size: 2.5rem;
            font-weight: bold;
            color: #4A5568;
            margin-bottom: 1.5rem; /* Reducido margen inferior */
            text-transform: uppercase;
            letter-spacing: 1px; /* Ajustar el espaciado entre letras */
            line-height: 1.2; /* Mejora la alineación vertical */
            margin-bottom: -3rem;
        }


    </style>
  </head>
  <body>
    <Header />
    <br>
    <br><br><br>
    <div class="container">
      {banners.length > 0 && banners.some((banner) => banner.id_banner === 3) ? (
        <div class="banner">
          <img 
            src={banners.find((banner) => banner.id_banner === 3).img1} 
            srcset={`${banners.find((banner) => banner.id_banner === 3).img1cell} 768w, ${banners.find((banner) => banner.id_banner === 3).img1} 1024w`} 
            sizes="(max-width: 768px) 100vw, 1024px" 
            alt={`Banner ${banners.find((banner) => banner.id_banner === 3).id_banner}`} 
          />
        </div>
      ) : (
        <p>No hay banners disponibles</p>
      )}
    </div>
    
    
    
    <div class="container my-6">
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-6">
        <a href="/Descuentos" class="section-item bg-gray-200 h-40 flex items-center justify-center relative">
          <img src="/public/img/banners/ba-descuentos.png" alt="Imagen Mujer" class="section-item" />
          <span class="relative z-10"></span>
        </a>
        
        <a href="/Novedades" class="section-item bg-gray-200 h-40 flex items-center justify-center relative">
          <img src="/public/img/banners/ba-novedades.png" alt="Imagen Hombre" class="section-item" />
          <span class="relative z-10"></span>
        </a>
        
        <a href="/Accesorios" class="section-item bg-gray-200 h-40 flex items-center justify-center relative">
          <img src="/public/img/banners/ba-accesorios.png" alt="Imagen Niños" class="section-item" />
          <span class="relative z-10"></span>
        </a>
        
      </div>
    </div>

<h1 class="page-title">DESCUENTOS</h1>
<br>

<div class="container flex flex-col md:flex-row">
    <!-- Panel de filtros -->
    <aside id="filtersPanel" class="filters w-full md:w-1/5 p-4 bg-white shadow-md mt-9 filter-container mr-6 hidden md:block">
      <button class="close-button md:hidden" onclick="closeFilters()">×</button>
      <h2 class="font-bold text-xl mb-4">Filtros</h2>
      <div class="mb-6">
          <h3 class="font-semibold">Rango de Precios</h3>
          <ul class="space-y-2 mt-2">
              <li><input type="checkbox" id="price-1-20" /> <label for="price-1-20">S/ 1 - S/ 20</label></li>
              <li><input type="checkbox" id="price-21-40" /> <label for="price-21-40">S/ 21 - S/ 40</label></li>
              <li><input type="checkbox" id="price-41-60" /> <label for="price-41-60">S/ 41 - S/ 60</label></li>
              <li><input type="checkbox" id="price-61-100" /> <label for="price-61-100">S/ 61 - S/ 100</label></li>
              <li><input type="checkbox" id="price-101-300" /> <label for="price-101-300">S/ 101 - S/ 300</label></li>
          </ul>
      </div>
      
      <div class="mb-6">
          <h3 class="font-semibold">Descuentos</h3>
          <ul class="space-y-2 mt-2">
              <li><input type="checkbox" id="discount-0-10" /> <label for="discount-0-10">0% - 10%</label></li>
              <li><input type="checkbox" id="discount-11-20" /> <label for="discount-11-20">11% - 20%</label></li>
              <li><input type="checkbox" id="discount-21-30" /> <label for="discount-21-30">21% - 30%</label></li>
              <li><input type="checkbox" id="discount-31-40" /> <label for="discount-31-40">31% - 40%</label></li>
              <li><input type="checkbox" id="discount-41-50" /> <label for="discount-41-50">41% - 50%</label></li>
          </ul>
      </div>
  </aside>



    <!-- Productos de faldas -->
    <main class="w-full md:w-4/5 p-4">
      <div class="sort-filter-container flex justify-between items-center mb-4">
        <button class="filter-button md:hidden" id="toggleFilters" onclick="openFilters()">Mostrar Filtros</button>
        <select id="sort-select" class="sort-select">
            <option value="default">Ordenar por</option>
            <option value="price-asc">Precio: Menor a Mayor</option>
            <option value="price-desc">Precio: Mayor a Menor</option>
        </select>
      </div>
        <div class="cards-container">
            <div class="cards-container">
                {filteredProducts.map((product: Product) => (
                    <div class="card">
                        <img src={product.img1} alt={`Imagen de ${product.nombre_producto}`} />
                        <div class="card-content">
                        <h2 class="card-title">{product.nombre_producto}</h2>
                        
                        <div class="price-section">
                            {product.descuento && product.descuento > 0 ? (
                            <>
                                <div class="flex justify-center items-center gap-2 mt-2">
                                <span class="original-price text-sm line-through text-gray-500">
                                    S/ {Number(product.precio).toFixed(2)}
                                </span>
                                <span class="discount-badge text-sm text-white bg-red-600 px-2 py-1 rounded-md">
                                    -{Math.round(product.descuento)}%
                                </span>
                                </div>
                                <div class="flex justify-center mt-2">
                                <span class="price-tag text-xl font-bold text-red-600">
                                    S/ {(Number(product.precio) * (1 - product.descuento / 100)).toFixed(2)}
                                </span>
                                </div>
                            </>
                            ) : (
                            <div class="flex justify-center mt-2">
                                <span class="price-tag text-xl font-bold">
                                S/ {Number(product.precio).toFixed(2)}
                                </span>
                            </div>
                            )}
                        </div>
            
                        <a href={`/detalle/${product.id_producto}`} class="card-button">Comprar</a>
                        </div>
                    </div>
                ))}
        </div>
    </main>
</div>

<Footer />

<script>
  // Función para alternar la visibilidad del panel de filtros
  document.getElementById('toggleFilters').addEventListener('click', function() {
    const filtersPanel = document.getElementById('filtersPanel');
    filtersPanel.classList.toggle('hidden');
    
    // Cambiar el texto del botón según el estado del panel
    const button = document.getElementById('toggleFilters');
    if (filtersPanel.classList.contains('hidden')) {
      button.textContent = 'Filtros';
    } else {
      button.textContent = 'Filtros';
    }
  });

  const body = document.body;
  const filtersPanel = document.getElementById("filtersPanel");

  function openFilters() {
      filtersPanel.classList.remove("hidden");
      body.classList.add("no-scroll");
  }

  function closeFilters() {
      filtersPanel.classList.add("hidden");
      body.classList.remove("no-scroll");
  }
</script>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
      // Fetch products from the server again to ensure we have the full product list
      fetch('http://localhost:3000/api/productos')
          .then(response => response.json())
          .then(allProducts => {
              // Filter only skirt products (id_categoria = 3)
              const products = allProducts.filter(product => product.descuento !== null);
              
              const priceCheckboxes = document.querySelectorAll('input[id^="price-"]');
              const discountCheckboxes = document.querySelectorAll('input[id^="discount-"]');
              const cardsContainer = document.querySelector('.cards-container');
              const sortSelect = document.getElementById('sort-select');
              
              // Función para filtrar productos
              const filterProducts = () => {
                  const selectedPriceRanges = Array.from(priceCheckboxes)
                      .filter(checkbox => checkbox.checked)
                      .map(checkbox => checkbox.id);
      
                  const selectedDiscountRanges = Array.from(discountCheckboxes)
                      .filter(checkbox => checkbox.checked)
                      .map(checkbox => checkbox.id);
      
                  const filtered = products.filter(product => {
                      // Comprobar rango de precios
                      const isPriceMatch = selectedPriceRanges.length === 0 || selectedPriceRanges.some(range => {
                          switch (range) {
                              case 'price-1-20': return product.precio >= 1 && product.precio <= 20;
                              case 'price-21-40': return product.precio > 21 && product.precio <= 40;
                              case 'price-41-60': return product.precio > 41 && product.precio <= 60;
                              case 'price-61-100': return product.precio > 61 && product.precio <= 100;
                              case 'price-101-300': return product.precio > 101 && product.precio <= 300;
                              default: return false;
                          }
                      });
      
                      // Comprobar rango de descuentos
                      const isDiscountMatch = selectedDiscountRanges.length === 0 || selectedDiscountRanges.some(range => {
                          const discount = product.descuento || 0;
                          switch (range) {
                              case 'discount-0-10': return discount >= 0 && discount <= 10;
                              case 'discount-11-20': return discount > 11 && discount <= 20;
                              case 'discount-21-30': return discount > 21 && discount <= 30;
                              case 'discount-31-40': return discount > 31 && discount <= 40;
                              case 'discount-41-50': return discount > 41 && discount <= 50;
                              default: return false;
                          }
                      });
      
                      // Validar todas las condiciones
                      return isPriceMatch && isDiscountMatch;
                  });
      
                  // Apply sorting
                  const sortedProducts = sortProducts(filtered);
                  renderProducts(sortedProducts);
              };
      


              // Función para ordenar productos
              const sortProducts = (productsToSort) => {
                  const sortValue = sortSelect.value;
                  
                  switch(sortValue) {
                      case 'price-asc':
                          return productsToSort.sort((a, b) => {
                              // Calcular precio final con descuento
                              const priceA = a.descuento 
                                  ? a.precio * (1 - a.descuento / 100) 
                                  : a.precio;
                              const priceB = b.descuento 
                                  ? b.precio * (1 - b.descuento / 100) 
                                  : b.precio;
                              
                              return priceA - priceB;
                          });
                      case 'price-desc':
                          return productsToSort.sort((a, b) => {
                              // Calcular precio final con descuento
                              const priceA = a.descuento 
                                  ? a.precio * (1 - a.descuento / 100) 
                                  : a.precio;
                              const priceB = b.descuento 
                                  ? b.precio * (1 - b.descuento / 100) 
                                  : b.precio;
                              
                              return priceB - priceA;
                          });
                      default:
                          return productsToSort;
                  }
              };
      
              // Función para renderizar productos
              const renderProducts = (productsToRender) => {
                  cardsContainer.innerHTML = ''; // Limpiar el contenedor

                  if (productsToRender.length === 0) {
                      cardsContainer.innerHTML = '<p class="text-center">No hay productos disponibles.</p>';
                      return;
                  }

                  // Crear un contenedor de rejilla
                  const gridContainer = document.createElement('div');
                  gridContainer.className = 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6'; // Rejilla responsiva

                  productsToRender.forEach(product => {
                      const card = document.createElement('div');
                      card.className = 'card bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 flex flex-col'; // Flexbox para columna

                      // Asegurar que precio y descuento sean números
                      const precio = Number(product.precio);
                      const descuento = Number(product.descuento || 0);

                      card.innerHTML = `
                          <img 
                              src="${product.img1}" 
                              alt="Imagen de ${product.nombre_producto}" 
                              class="w-full h-48 object-cover"
                          />
                          <div class="card-content p-4 flex flex-col justify-between flex-grow">
                              <!-- Contenedor del título con truncamiento -->
                              <div class="title-container mb-2"> <!-- Reducir margen inferior -->
                                  <h2 class="card-title text-sm text-center font-semibold text-gray-800 overflow-hidden text-ellipsis whitespace-nowrap">
                                      ${product.nombre_producto}
                                  </h2>
                              </div>

                              <!-- Contenedor de precio -->
                              <div class="price-section mt-0 text-center"> <!-- Reducir el margen superior -->
                                  ${descuento > 0 
                                      ? `
                                      <div class="flex justify-center items-center gap-2">
                                          <span class="original-price text-xs line-through text-gray-500">
                                              S/ ${precio.toFixed(2)}
                                          </span>
                                          <span class="discount-badge text-xs text-white bg-pink-300 px-2 py-1 rounded-full">
                                              -${Math.round(descuento)}%
                                          </span>
                                      </div>
                                      <div class="flex justify-center mt-1"> <!-- Reducir margen entre precios -->
                                          <span class="price-tag text-xl font-bold text-pink-600">
                                              S/ ${(precio * (1 - descuento / 100)).toFixed(2)}
                                          </span>
                                      </div>`
                                      : `
                                      <div class="flex justify-center mt-2">
                                          <span class="price-tag text-xl font-bold text-gray-800">
                                              S/ ${precio.toFixed(2)}
                                          </span>
                                      </div>`
                                  }
                              </div>

                              <!-- Botón de compra, alineado en la parte inferior -->
                              <a 
                                  href="/detalle/${product.id_producto}" 
                                  class="card-button block text-center bg-pink-300 text-white text-sm font-medium py-2 px-4 rounded-lg mt-4 hover:bg-pink-600 transition-colors duration-300 mt-auto"
                              >
                                  Comprar
                              </a>
                          </div>
                      `;

                      // Agregar la tarjeta al contenedor de rejilla
                      gridContainer.appendChild(card);
                  });

                  // Agregar el contenedor de rejilla al contenedor principal
                  cardsContainer.appendChild(gridContainer);
              };

              // Agregar eventos a los checkboxes y selector de ordenamiento
              [...priceCheckboxes, ...discountCheckboxes].forEach(checkbox => {
                  checkbox.addEventListener('change', filterProducts);
              });
      
              // Evento para ordenamiento
              sortSelect.addEventListener('change', filterProducts);
      
              // Renderizar todos los productos inicialmente
              renderProducts(products);
          })
          .catch(error => {
              console.error('Error fetching products:', error);
          });
  });
</script> 
</body>
</html>
